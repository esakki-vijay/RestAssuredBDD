<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="26" passed="24" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-10-31T22:25:47 EDT" name="Default suite" finished-at="2021-10-31T22:25:53 EDT" duration-ms="6121">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" name="runScenario" class="io.cucumber.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test started-at="2021-10-31T22:25:47 EDT" name="Default test" finished-at="2021-10-31T22:25:53 EDT" duration-ms="6121">
      <class name="stepDefs.TestRunner">
        <test-method is-config="true" signature="setUpClass(org.testng.ITestContext)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:47 EDT" name="setUpClass" finished-at="2021-10-31T22:25:47 EDT" duration-ms="565" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@114a85c2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:47 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:51 EDT" duration-ms="3718" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:47 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:51 EDT" duration-ms="3718" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:47 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:51 EDT" duration-ms="3718" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:47 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:51 EDT" duration-ms="3718" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:47 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:51 EDT" duration-ms="3719" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:47 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:51 EDT" duration-ms="3719" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:47 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:51 EDT" duration-ms="3719" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:47 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:51 EDT" duration-ms="3717" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:47 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:51 EDT" duration-ms="3718" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:47 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:51 EDT" duration-ms="3718" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:51 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:52 EDT" duration-ms="936" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:51 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:52 EDT" duration-ms="828" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:51 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:52 EDT" duration-ms="910" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:51 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:52 EDT" duration-ms="926" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:51 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:52 EDT" duration-ms="935" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:51 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:52 EDT" duration-ms="914" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:51 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:52 EDT" duration-ms="889" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:51 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:52 EDT" duration-ms="891" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:51 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:52 EDT" duration-ms="927" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:51 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:52 EDT" duration-ms="937" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:52 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:53 EDT" duration-ms="778" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:52 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:52 EDT" duration-ms="152" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <exception class="org.apache.http.NoHttpResponseException">
            <message>
              <![CDATA[localhost:3000 failed to respond]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.apache.http.NoHttpResponseException: localhost:3000 failed to respond
at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:141)
at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:56)
at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:259)
at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:281)
at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:257)
at org.apache.http.impl.conn.ManagedClientConnectionImpl.receiveResponseHeader(ManagedClientConnectionImpl.java:207)
at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:273)
at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125)
at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:684)
at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:486)
at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
at org.apache.http.client.HttpClient$execute$15.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2055)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$28.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1181)
at jdk.internal.reflect.GeneratedMethodAccessor209.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$7.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$1.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter$1.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$7.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next$8.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1655)
at jdk.internal.reflect.GeneratedMethodAccessor206.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1661)
at jdk.internal.reflect.GeneratedMethodAccessor240.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:175)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at common.RestCalls.postMethod(RestCalls.java:26)
at stepDefs.RestSteps.post_request_done_with(RestSteps.java:13)
at ✽.Post request done with 22(file:///C:/Users/vijay/eclipse-workspace/RestAssuredBDD/src/test/resources/Features/RestDemo.feature:46)
]]>
            </full-stacktrace>
          </exception> <!-- org.apache.http.NoHttpResponseException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:52 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:53 EDT" duration-ms="831" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:52 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:53 EDT" duration-ms="819" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:52 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:52 EDT" duration-ms="129" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <exception class="org.apache.http.NoHttpResponseException">
            <message>
              <![CDATA[localhost:3000 failed to respond]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.apache.http.NoHttpResponseException: localhost:3000 failed to respond
at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:141)
at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:56)
at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:259)
at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:281)
at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:257)
at org.apache.http.impl.conn.ManagedClientConnectionImpl.receiveResponseHeader(ManagedClientConnectionImpl.java:207)
at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:273)
at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125)
at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:684)
at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:486)
at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
at org.apache.http.client.HttpClient$execute$15.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2055)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$28.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1181)
at jdk.internal.reflect.GeneratedMethodAccessor209.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$7.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$1.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter$1.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next$8.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1655)
at jdk.internal.reflect.GeneratedMethodAccessor206.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1661)
at jdk.internal.reflect.GeneratedMethodAccessor240.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:175)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at common.RestCalls.postMethod(RestCalls.java:26)
at stepDefs.RestSteps.post_request_done_with(RestSteps.java:13)
at ✽.Post request done with 25(file:///C:/Users/vijay/eclipse-workspace/RestAssuredBDD/src/test/resources/Features/RestDemo.feature:46)
]]>
            </full-stacktrace>
          </exception> <!-- org.apache.http.NoHttpResponseException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:52 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-10-31T22:25:53 EDT" duration-ms="786" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Post, Update and get"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Post, Update and Get flows]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method is-config="true" signature="tearDownClass()[pri:0, instance:stepDefs.TestRunner@1da2cb77]" started-at="2021-10-31T22:25:53 EDT" name="tearDownClass" finished-at="2021-10-31T22:25:53 EDT" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- stepDefs.TestRunner -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
